  Procedure: main
  Intermediate Code Statements
	iLoad.d    	f2 <- 1.20
	iLoad.d    	f4 <- 1.00
	add.d    	f6 <- f2 , f4
	iLoad.d    	f8 <- 1.00
	add.d    	f10 <- f6 , f8
	store.d    	x_ <- f10
	iLoad.d    	f12 <- 1.30
	store.d    	y_ <- f12
	load    	f14 <- x_
	load    	f16 <- y_
	sne    	t0 <- f14 , f16
	beq        	t0 , zero : goto label0
	iLoad.d    	f18 <- 4.00
	store.d    	z_ <- f18
	goto label1

label0:
	iLoad.d    	f20 <- 3.00
	store.d    	z_ <- f20

label1:

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $fp, 0($sp)		# Save the frame pointer
	sub $fp, $sp, 4		# Update the frame pointer

	sub $sp, $sp, 28		# Make space for the locals
# Prologue ends

	li.d $f2, 1.20
	li.d $f4, 1.00
	add.d $f6, $f2, $f4
	li.d $f8, 1.00
	add.d $f10, $f6, $f8
	s.d $f10, 0($fp)
	li.d $f12, 1.30
	s.d $f12, -8($fp)
	lw $f14, 0($fp)
	lw $f16, -8($fp)
	sne $t0, $f14, $f16
	beq        	t0, $zero, label0
	li.d $f18, 4.00
	s.d $f18, -16($fp)
	j label1

label0:
	li.d $f20, 3.00
	s.d $f20, -16($fp)

label1:

# Epilogue Begins
	add $sp, $sp, 28
	lw $fp, 0($sp)  
	jr        $31		# Jump back to the operating system.
# Epilogue Ends

